{"version":3,"file":"static/js/984.1dab5f55.chunk.js","mappings":"kOACaA,EAAWC,EAAAA,GAAAA,EAAH,sKASRC,EAAaD,EAAAA,GAAAA,IAAH,4H,gDCDVE,EAAc,CACzBC,SAAU,cACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,G,uCCmFZ,MApFA,YAA6D,IAArCC,EAAoC,EAApCA,cAAeC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,UACrCC,EAAaC,EAAAA,EAAAA,SACfC,GAAWC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,QAAV,IAClC,GAA0BG,EAAAA,EAAAA,WAAS,GAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACMC,GAAYP,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMO,KAAV,IALuB,8CAM1D,iBAEiBC,EAFjB,iIAEE,WAAqBC,GAArB,8FAC+Bb,EAASc,QAAQD,GADhD,cACQE,EADR,gBAEuBA,EAAeC,KAFtC,cAEQlB,EAFR,yBAGSA,GAHT,2CAFF,yBAEiBc,EAFjB,4CACEH,GAAa,GADf,kBAQuBQ,QAAQC,IAAIhB,EAASiB,IAAT,yCAAa,WAAMC,GAAN,+FAAYR,EAAMQ,IAAlB,2CAAb,wDARnC,cAQUC,EARV,gBAS+BA,EAAKF,KAC9B,kBAAiD,CAC/CC,GADF,EAAGA,GAEDE,KAFF,EAAOA,KAGLC,gBAHF,EAAaA,gBAIXC,MAJF,EAA8BA,MAK5BC,KALF,EAAqCA,KAArC,IAVN,cASUC,EATV,iBAkBU3B,EAAU2B,GAlBpB,QAmBIjB,GAAa,GAnBjB,kDAqBIkB,QAAQC,IAAR,qMACAC,EAAAA,GAAAA,KAAW,sNAA6CzC,GACxDmB,EAAS,EAAD,IAvBZ,0DAN0D,wBAqC1D,OALAuB,EAAAA,EAAAA,YAAU,YAhCgD,mCAiCxDC,EAED,GAAE,CAAC7B,KAGF,UAACf,EAAD,YACE,SAAC,KAAD,CACE6C,WAAYC,EAAAA,GACZC,MAAM,OACN7C,SAAS,eACTC,UAAW,IACXC,iBAAiB,EACjB4C,aAAa,EACb3C,cAAY,EACZ4C,KAAK,EACLC,kBAAgB,EAChB3C,WAAW,EACXD,cAAY,IAEba,IACC,SAACrB,EAAD,4DAEDa,EAAOwC,OAAS,IACf,SAACC,EAAA,EAAD,CACEzC,OAAQA,EACR0C,SAAUA,EAAAA,EACV3C,cAAeA,IAGlBW,IAAa,SAACiC,EAAA,EAAD,IACb3C,EAAOwC,OAAS,KAAM,SAACI,EAAA,EAAD,IACtBhC,IAAa,SAACiC,EAAA,EAAD,CAAO3B,KAAMlB,EAAQ0C,SAAUA,EAAAA,KAE7C,SAACI,EAAA,EAAD,mIAGL,C","sources":["pages/FavoritePage/FavoritePage.styled.jsx","services/others/toast/notificationSetting.js","pages/FavoritePage/FavoritePage.jsx"],"sourcesContent":["import styled from 'styled-components';\nexport const ErrorMsg = styled.p`\n  position: absolute;\n  top: 50%;\n  right: 50%;\n  transform: translate(50%, 50%);\n  font-size: 27px;\n  z-index: 3;\n  font-weight: 500;\n`;\nexport const AppWrapper = styled.div`\n  display: flex;\n\n  flex-direction: column;\n  justify-content: space-between;\n  height: 100vh;\n`;\n","export const successSettings = {\n  position: 'bottom-left',\n  autoClose: 1000,\n  hideProgressBar: false,\n  closeOnClick: true,\n  pauseOnHover: true,\n  draggable: false,\n  progress: undefined,\n};\nexport const warmSetting = {\n  position: 'bottom-left',\n  autoClose: 1000,\n  hideProgressBar: false,\n  closeOnClick: true,\n  pauseOnHover: true,\n  draggable: false,\n  progress: undefined,\n};\n","import { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { ErrorMsg, AppWrapper } from './FavoritePage.styled';\nimport { ImageGallery } from 'components/ImageGallery/ImageGallery';\nimport { Modal } from 'components/Modal/Modal';\nimport { LoaderSpiner } from 'components/Loader/Loader';\nimport { ScrollChevron } from 'components/ScrollChevron/ScrollChevron';\nimport { toast } from 'react-toastify';\nimport { ToastContainer, Flip } from 'react-toastify';\nimport { warmSetting } from 'services/others/toast/notificationSetting';\nimport { Footer } from 'components/Footer/Footer';\nimport rest from 'services/rest';\nimport download from 'operations/download';\nimport PropTypes from 'prop-types';\n\nfunction FavoritePage({ addToFovorite, images, setImages }) {\n  const { unsplash } = rest;\n  const favorite = useSelector(state => state.favorite);\n  const [error, setError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const openModal = useSelector(state => state.modal);\n  async function renderFavorite() {\n    setIsLoading(true);\n    async function fetch(parsedId) {\n      const imagesResponse = await unsplash.getById(parsedId);\n      const images = await imagesResponse.data;\n      return images;\n    }\n    try {\n      const list = await Promise.all(favorite.map(async id => fetch(id)));\n      const preparedImgs = await list.map(\n        ({ id, urls, alt_description, links, user }) => ({\n          id,\n          urls,\n          alt_description,\n          links,\n          user,\n        })\n      );\n      await setImages(preparedImgs);\n      setIsLoading(false);\n    } catch (error) {\n      console.log(error, `Попробуйте перезагрузить страницу`);\n      toast.warn('Упс... Попробуйте перезагрузить страницу!', warmSetting);\n      setError(error);\n    }\n  }\n  useEffect(() => {\n    renderFavorite();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [favorite]);\n\n  return (\n    <AppWrapper>\n      <ToastContainer\n        transition={Flip}\n        theme=\"dark\"\n        position=\"bottom-right\"\n        autoClose={1000}\n        hideProgressBar={false}\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable={false}\n        pauseOnHover\n      />\n      {error && (\n        <ErrorMsg>Something wrong.. Press F5 and try again. :( </ErrorMsg>\n      )}\n      {images.length > 0 && (\n        <ImageGallery\n          images={images}\n          download={download}\n          addToFovorite={addToFovorite}\n        />\n      )}\n      {isLoading && <LoaderSpiner />}\n      {images.length > 11 && <ScrollChevron />}\n      {openModal && <Modal data={images} download={download} />}\n\n      <Footer>Copyright © Все права защищены.</Footer>\n    </AppWrapper>\n  );\n}\n\nFavoritePage.propTypes = {\n  addToFovorite: PropTypes.func.isRequired,\n  images: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      urls: PropTypes.object.isRequired,\n      links: PropTypes.object.isRequired,\n      user: PropTypes.object.isRequired,\n    })\n  ).isRequired,\n  setImages: PropTypes.func.isRequired,\n};\n\nexport default FavoritePage;\n"],"names":["ErrorMsg","styled","AppWrapper","warmSetting","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","addToFovorite","images","setImages","unsplash","rest","favorite","useSelector","state","useState","error","setError","isLoading","setIsLoading","openModal","modal","fetch","parsedId","getById","imagesResponse","data","Promise","all","map","id","list","urls","alt_description","links","user","preparedImgs","console","log","toast","useEffect","renderFavorite","transition","Flip","theme","newestOnTop","rtl","pauseOnFocusLoss","length","ImageGallery","download","Loader","ScrollChevron","Modal","Footer"],"sourceRoot":""}